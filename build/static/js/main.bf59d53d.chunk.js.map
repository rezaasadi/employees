{"version":3,"sources":["components/Employees.jsx","components/Groups.jsx","components/Navigation/SideBar.jsx","components/UI/Buttons/EditButton.jsx","components/UI/Buttons/DeleteButtonSingle.jsx","components/Employee.jsx","components/UI/ListHeader.jsx","components/UI/Buttons/AddButton.jsx","components/UI/Buttons/DeleteButton.jsx","components/Group.jsx","components/Member.jsx","App.js","serviceWorker.js","index.js"],"names":["__ID","__MEMBER_ID","__GROUP_ID","sideBar","props","id","className","children","editButton","href","onClick","clicked","data-toggle","title","deleteButtonSingle","employee","type","emp","name","value","checked","onChange","e","handleChecked","target","htmlFor","email","address","phone","groups","map","gr","join","EditButton","onSave","DeleteButtonSingle","onDelete","listHeader","addButton","deleteButton","disabled","__DELETE_TYPE","Employees","state","employeeList","groupList","selectedRecord","employeeModalshow","employeeModalType","deleteModalshow","addEmployeeHandler","eList","newId","Object","keys","length","newEmployee","axios","post","then","res","status","setState","resetTempData","removeEmployeeFromGroups","Promise","resolve","forEach","grId","group","members","splice","indexOf","parseInt","put","deleteSelectedEmployees","recordList","empId","delete","submitDeleteEmployee","a","rList","closeDeleteModal","submitEditedEmployee","selectHandler","push","checkAll","key","editEmployeeModal","closeEmployeeModal","newEmployeeModal","deleteEmployeeModal","get","data","employees","ListHeader","AddButton","this","DeleteButton","oEmp","Employee","Modal","show","onHide","Header","closeButton","Title","Body","Form","FormGroup","event","required","Footer","Button","variant","Component","memberCounts","member","action","onRemove","__CHECK_ALL","Groups","groupModalshow","groupModalType","deleteType","manageGroups","addMembersModalshow","checkAllGroups","addGroupHandler","gList","newGroup","editGroupModal","submitEditedGroup","closeGroupModal","newGroupModal","deleteGroupModal","removeEmployeesFromGroup","deleteSelectedGroups","submitDeleteGroup","manageMembersClick","checkAllMembers","mList","removeMemberModal","memId","submitRemoveMember","removeMembersFromGroup","list","addMembersModal","closeAddMembersModal","checkAllListedEmployees","addMembersToGroup","submitAddMembers","Group","Breadcrumb","Item","active","Member","App","history","createBrowserHistory","useState","setActive","useEffect","location","pathname","SideBar","to","path","Boolean","window","hostname","match","defaults","baseURL","headers","interceptors","request","use","error","alert","reject","response","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bf59d53d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport Employee from \"./Employee\";\r\nimport ListHeader from \"./UI/ListHeader\";\r\nimport AddButton from \"./UI/Buttons/AddButton\";\r\nimport DeleteButton from \"./UI/Buttons/DeleteButton\";\r\n\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport FormGroup from \"react-bootstrap/FormGroup\";\r\n\r\nlet __DELETE_TYPE = false,\r\n  __ID;\r\n\r\nclass Employees extends Component {\r\n  state = {\r\n    employeeList: {},\r\n    groupList: {},\r\n    selectedRecord: [],\r\n    employeeModalshow: false,\r\n    employeeModalType: 0,\r\n    name: \"\",\r\n    email: \"\",\r\n    address: \"\",\r\n    phone: \"\",\r\n    groups: [],\r\n    deleteModalshow: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    axios.get(\"/groups\").then(res => {\r\n      const groups = {};\r\n      res.data.map(\r\n        gr => (groups[gr.id] = { name: gr.name, members: gr.members })\r\n      );\r\n      this.setState({ groupList: groups });\r\n      axios.get(\"/employees\").then(res => {\r\n        const employees = {};\r\n        res.data.map(\r\n          emp =>\r\n            (employees[emp.id] = {\r\n              name: emp.name,\r\n              email: emp.email,\r\n              address: emp.address,\r\n              phone: emp.phone,\r\n              groups: emp.groups\r\n            })\r\n        );\r\n        this.setState({ employeeList: employees });\r\n      });\r\n    });\r\n  }\r\n\r\n  addEmployeeHandler = () => {\r\n    let eList = { ...this.state.employeeList };\r\n    const newId = Object.keys(eList).length\r\n      ? Object.keys(eList)[Object.keys(eList).length - 1] * 1 + 1\r\n      : \"0\";\r\n    const newEmployee = {\r\n      id: newId,\r\n      name: this.state.name,\r\n      email: this.state.email,\r\n      address: this.state.address,\r\n      phone: this.state.phone,\r\n      groups: []\r\n    };\r\n\r\n    axios.post(\"/employees\", newEmployee).then(res => {\r\n      if (res.status === 201) {\r\n        delete newEmployee.id;\r\n        eList[newId] = newEmployee;\r\n        this.setState({ employeeList: eList });\r\n        this.resetTempData();\r\n        this.setState({ employeeModalshow: false });\r\n      }\r\n    });\r\n  };\r\n\r\n  //Remove employee from subscribed groups and delete employee\r\n  removeEmployeeFromGroups = (id, employeeList) => {\r\n    return new Promise(resolve => {\r\n      if (employeeList[id].groups.length === 0) resolve(true);\r\n      employeeList[id].groups.forEach(grId => {\r\n        let group = { ...this.state.groupList }[grId];\r\n        group.id = grId;\r\n        group.members.splice(group.members.indexOf(parseInt(id)), 1);\r\n        axios.put(\"/groups/\" + grId, group).then(res => {\r\n          if (\r\n            employeeList[id].groups.indexOf(grId) ===\r\n            employeeList[id].groups.length - 1\r\n          )\r\n            resolve(true);\r\n        });\r\n      });\r\n    });\r\n  };\r\n\r\n  //Remove all selected employees and their subscribes\r\n  deleteSelectedEmployees = (recordList, employeeList) => {\r\n    return new Promise(resolve => {\r\n      recordList.map(empId =>\r\n        this.removeEmployeeFromGroups(empId, employeeList).then(res =>\r\n          axios.delete(\"/employees/\" + empId).then(res => {\r\n            delete employeeList[empId];\r\n            this.setState({ employeeList });\r\n            if (recordList.indexOf(empId) === recordList.length - 1)\r\n              resolve(true);\r\n          })\r\n        )\r\n      );\r\n    });\r\n  };\r\n\r\n  submitDeleteEmployee = async () => {\r\n    let eList = { ...this.state.employeeList };\r\n    if (!__DELETE_TYPE) {\r\n      // Delete one employee at the row\r\n      await this.removeEmployeeFromGroups(__ID, eList);\r\n\r\n      await axios.delete(\"/employees/\" + __ID);\r\n      delete eList[__ID];\r\n      if (this.state.selectedRecord.indexOf(__ID) !== -1) {\r\n        let rList = [...this.state.selectedRecord];\r\n        rList.splice(rList.indexOf(__ID), 1);\r\n        this.setState({ selectedRecord: rList });\r\n      }\r\n      this.setState({ employeeList: eList });\r\n      this.closeDeleteModal();\r\n    } else {\r\n      // Delete some of selected employees\r\n      await this.deleteSelectedEmployees(this.state.selectedRecord, eList);\r\n      this.setState({ selectedRecord: [] });\r\n      this.closeDeleteModal();\r\n    }\r\n  };\r\n\r\n  submitEditedEmployee = () => {\r\n    let eList = { ...this.state.employeeList };\r\n    const emp = {\r\n      id: __ID,\r\n      name: this.state.name,\r\n      email: this.state.email,\r\n      address: this.state.address,\r\n      phone: this.state.phone,\r\n      groups: this.state.groups\r\n    };\r\n    axios.put(\"/employees/\" + __ID, emp).then(res => {\r\n      if (res.status === 200) {\r\n        delete emp.id;\r\n        eList[__ID] = emp;\r\n        this.setState({ employeeList: eList });\r\n        this.setState({ employeeModalshow: false });\r\n        this.resetTempData();\r\n      }\r\n    });\r\n  };\r\n\r\n  selectHandler = target => {\r\n    let rList = [...this.state.selectedRecord];\r\n    if (target.value) rList.push(target.id);\r\n    else rList.splice(rList.indexOf(target.id), 1);\r\n    this.setState({ selectedRecord: rList });\r\n  };\r\n\r\n  checkAll = checked => {\r\n    let rList = [];\r\n    if (checked)\r\n      rList = Object.keys({ ...this.state.employeeList }).map(key => key);\r\n    this.setState({ selectedRecord: rList });\r\n  };\r\n\r\n  editEmployeeModal = emp => {\r\n    __ID = emp.id;\r\n    this.setState({ name: emp.name });\r\n    this.setState({ email: emp.email });\r\n    this.setState({ address: emp.address });\r\n    this.setState({ phone: emp.phone });\r\n    this.setState({ groups: emp.groups });\r\n    this.setState({ employeeModalType: 1 });\r\n    this.setState({ employeeModalshow: true });\r\n  };\r\n\r\n  resetTempData = () => {\r\n    this.setState({ name: \"\" });\r\n    this.setState({ email: \"\" });\r\n    this.setState({ address: \"\" });\r\n    this.setState({ phone: \"\" });\r\n    this.setState({ groups: [] });\r\n  };\r\n\r\n  closeEmployeeModal = () => {\r\n    this.resetTempData();\r\n    this.setState({ employeeModalshow: false });\r\n  };\r\n  newEmployeeModal = () => {\r\n    this.resetTempData();\r\n    this.setState({ employeeModalType: 0 });\r\n    this.setState({ employeeModalshow: true });\r\n  };\r\n\r\n  deleteEmployeeModal = id => {\r\n    if (id != null) {\r\n      __ID = id;\r\n      __DELETE_TYPE = false;\r\n    } else __DELETE_TYPE = true;\r\n    this.setState({ deleteModalshow: true });\r\n  };\r\n\r\n  closeDeleteModal = () => {\r\n    this.setState({ deleteModalshow: false });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"container\">\r\n          <div className=\"table-wrapper\">\r\n            <ListHeader title={\"Manage Employees\"}>\r\n              <AddButton\r\n                title={\"Add New Employee\"}\r\n                onClick={this.newEmployeeModal}\r\n              />\r\n              <DeleteButton\r\n                title={\"Delete\"}\r\n                disabled={!this.state.selectedRecord.length}\r\n                onClick={() => this.deleteEmployeeModal(null)}\r\n              />\r\n            </ListHeader>\r\n            <table className=\"table table-striped table-hover table-body-scrollY\">\r\n              <thead>\r\n                <tr>\r\n                  <th>\r\n                    <span className=\"custom-checkbox\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        id=\"selectAll\"\r\n                        onChange={e => {\r\n                          this.checkAll(e.target.checked);\r\n                        }}\r\n                      ></input>\r\n                      <label htmlFor=\"selectAll\"></label>\r\n                    </span>\r\n                  </th>\r\n                  <th>Name</th>\r\n                  <th>Email</th>\r\n                  <th>Address</th>\r\n                  <th>Phone</th>\r\n                  <th>Groups</th>\r\n                  <th>Actions</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {Object.keys(this.state.employeeList).map(id => {\r\n                  let employee = { ...this.state.employeeList[id] };\r\n                  employee.id = id;\r\n                  let oEmp = { ...employee };\r\n                  employee.groups = employee.groups.map(\r\n                    gr => this.state.groupList[gr].name\r\n                  );\r\n                  return (\r\n                    <Employee\r\n                      key={id}\r\n                      emp={employee}\r\n                      checked={this.state.selectedRecord.indexOf(id) !== -1}\r\n                      handleChecked={this.selectHandler}\r\n                      onDelete={() => this.deleteEmployeeModal(id)}\r\n                      onSave={() => this.editEmployeeModal(oEmp)}\r\n                    />\r\n                  );\r\n                })}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n\r\n        {/* --------------------------- ADD NEW & EDIT EMPLOYEE MODAL --------------------------- */}\r\n        <Modal\r\n          show={this.state.employeeModalshow}\r\n          onHide={this.closeEmployeeModal}\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>\r\n              {this.state.employeeModalType === 0\r\n                ? \"Add New Employee\"\r\n                : \"Edit Employee\"}\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Form>\r\n              <FormGroup>\r\n                <label>Name</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  value={this.state.name}\r\n                  onChange={event =>\r\n                    this.setState({ name: event.target.value })\r\n                  }\r\n                  required\r\n                ></input>\r\n              </FormGroup>\r\n              <FormGroup>\r\n                <label>Email</label>\r\n                <input\r\n                  type=\"email\"\r\n                  className=\"form-control\"\r\n                  value={this.state.email}\r\n                  onChange={event =>\r\n                    this.setState({ email: event.target.value })\r\n                  }\r\n                  required\r\n                ></input>\r\n              </FormGroup>\r\n              <FormGroup>\r\n                <label>Address</label>\r\n                <textarea\r\n                  className=\"form-control\"\r\n                  value={this.state.address}\r\n                  onChange={event =>\r\n                    this.setState({ address: event.target.value })\r\n                  }\r\n                  required\r\n                ></textarea>\r\n              </FormGroup>\r\n              <FormGroup>\r\n                <label>Phone</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  value={this.state.phone}\r\n                  onChange={event =>\r\n                    this.setState({ phone: event.target.value })\r\n                  }\r\n                  required\r\n                ></input>\r\n              </FormGroup>\r\n            </Form>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={this.closeEmployeeModal}>\r\n              Cancel\r\n            </Button>\r\n            {this.state.employeeModalType === 0 ? (\r\n              <Button variant=\"success\" onClick={this.addEmployeeHandler}>\r\n                Add\r\n              </Button>\r\n            ) : (\r\n              <Button variant=\"info\" onClick={this.submitEditedEmployee}>\r\n                Save\r\n              </Button>\r\n            )}\r\n          </Modal.Footer>\r\n        </Modal>\r\n\r\n        {/* --------------------------- DELETE EMPLOYEE MODAL --------------------------- */}\r\n        <Modal show={this.state.deleteModalshow} onHide={this.closeDeleteModal}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Delete Records</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <p>Are you sure you want to delete these Records?</p>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={this.closeDeleteModal}>\r\n              Cancel\r\n            </Button>\r\n            <Button variant=\"danger\" onClick={this.submitDeleteEmployee}>\r\n              Delete\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Employees;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport Group from \"./Group\";\r\nimport Member from \"./Member\";\r\nimport ListHeader from \"./UI/ListHeader\";\r\nimport AddButton from \"./UI/Buttons/AddButton\";\r\nimport DeleteButton from \"./UI/Buttons/DeleteButton\";\r\n\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport FormGroup from \"react-bootstrap/FormGroup\";\r\nimport Breadcrumb from \"react-bootstrap/Breadcrumb\";\r\n\r\nlet __MEMBER_ID,\r\n  __GROUP_ID,\r\n  __DELETE_TYPE = false,\r\n  __CHECK_ALL = false;\r\n\r\nclass Groups extends Component {\r\n  state = {\r\n    groupList: {},\r\n    employeeList: {},\r\n    selectedRecord: [],\r\n    groupModalshow: false,\r\n    groupModalType: 0,\r\n    name: \"\",\r\n    members: [],\r\n    deleteModalshow: false,\r\n    deleteType: false,\r\n    manageGroups: true,\r\n    addMembersModalshow: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    axios.get(\"/groups?_sort=name&_order=asc\").then(res => {\r\n      const groups = {};\r\n      res.data.map(\r\n        gr => (groups[gr.id] = { name: gr.name, members: gr.members })\r\n      );\r\n      this.setState({ groupList: groups });\r\n    });\r\n\r\n    axios.get(\"/employees\").then(res => {\r\n      const employees = {};\r\n      res.data.map(\r\n        emp =>\r\n          (employees[emp.id] = {\r\n            name: emp.name,\r\n            email: emp.email,\r\n            address: emp.address,\r\n            phone: emp.phone,\r\n            groups: emp.groups\r\n          })\r\n      );\r\n      this.setState({ employeeList: employees });\r\n    });\r\n  }\r\n\r\n  selectHandler = target => {\r\n    let rList = [...this.state.selectedRecord];\r\n    if (target.value) rList.push(parseInt(target.id));\r\n    else rList.splice(rList.indexOf(parseInt(target.id)), 1);\r\n    this.setState({ selectedRecord: rList });\r\n  };\r\n\r\n  checkAllGroups = checked => {\r\n    let rList = [];\r\n    if (checked) {\r\n      __CHECK_ALL = true;\r\n      rList = Object.keys({ ...this.state.groupList }).map(key => key);\r\n    } else __CHECK_ALL = false;\r\n\r\n    this.setState({ selectedRecord: rList });\r\n  };\r\n\r\n  // --------------------------- GROUPS FUNCTIONS ---------------------------\r\n\r\n  addGroupHandler = () => {\r\n    let gList = { ...this.state.groupList };\r\n    const newId = Object.keys(gList).length\r\n      ? Object.keys(gList)[Object.keys(gList).length - 1] * 1 + 1\r\n      : \"10000\";\r\n    const newGroup = {\r\n      id : newId,\r\n      name: this.state.name,\r\n      members: []\r\n    };\r\n    axios.post(\"/groups\", newGroup).then(res => {\r\n      if (res.status === 201) {\r\n        delete newGroup.id;\r\n        gList[newId] = newGroup;\r\n        this.setState({ groupList: gList });\r\n        this.resetTempData();\r\n        this.setState({ groupModalshow: false });\r\n      }\r\n    });\r\n  };\r\n\r\n  editGroupModal = group => {\r\n    __GROUP_ID = group.id;\r\n    this.setState({ name: group.name });\r\n    this.setState({ members: group.members });\r\n    this.setState({ groupModalType: 1 });\r\n    this.setState({ groupModalshow: true });\r\n  };\r\n\r\n  submitEditedGroup = () => {\r\n    let gList = { ...this.state.groupList };\r\n    const group = {\r\n      id: __GROUP_ID,\r\n      name: this.state.name,\r\n      members: this.state.members\r\n    };\r\n    axios.put(\"/groups/\" + __GROUP_ID, group).then(res => {\r\n      if (res.status === 200) {\r\n        delete group.id;\r\n        gList[__GROUP_ID] = group;\r\n        this.setState({ groupList: gList });\r\n        this.setState({ groupModalshow: false });\r\n        this.resetTempData();\r\n      }\r\n    });\r\n  };\r\n\r\n  resetTempData = () => {\r\n    this.setState({ name: \"\" });\r\n    this.setState({ members: [] });\r\n    this.setState({ selectedRecord: [] });\r\n    __CHECK_ALL = false;\r\n  };\r\n\r\n  closeGroupModal = () => {\r\n    this.resetTempData();\r\n    this.setState({ groupModalshow: false });\r\n  };\r\n\r\n  newGroupModal = () => {\r\n    this.resetTempData();\r\n    this.setState({ groupModalType: 0 });\r\n    this.setState({ groupModalshow: true });\r\n  };\r\n\r\n  deleteGroupModal = id => {\r\n    if (id != null) {\r\n      __GROUP_ID = id;\r\n      __DELETE_TYPE = false;\r\n    } else __DELETE_TYPE = true;\r\n    this.setState({ deleteModalshow: true });\r\n  };\r\n\r\n  closeDeleteModal = () => {\r\n    this.setState({ deleteModalshow: false });\r\n  };\r\n\r\n  //Remove all subscribed employees from this group\r\n  removeEmployeesFromGroup = (gr, grId, employeeList) => {\r\n    return new Promise(resolve => {\r\n      if (gr.members.length === 0) resolve(true);\r\n      gr.members.forEach(empId => {\r\n        let emp = { ...this.state.employeeList }[empId];\r\n        emp.id = empId;\r\n        employeeList[empId].groups.splice(\r\n          employeeList[empId].groups.indexOf(parseInt(grId)),\r\n          1\r\n        );\r\n        axios.put(\"/employees/\" + empId, emp).then(res => {\r\n          if (gr.members.indexOf(empId) === gr.members.length - 1)\r\n            resolve(true);\r\n        });\r\n      });\r\n    });\r\n  };\r\n\r\n  //Remove all selected groups and their subscribed employees\r\n  deleteSelectedGroups = (recordList, groupList, employeeList) => {\r\n    return new Promise(resolve => {\r\n      recordList.forEach(grId =>\r\n        this.removeEmployeesFromGroup(groupList[grId], grId, employeeList).then(\r\n          res =>\r\n            axios.delete(\"/groups/\" + grId).then(res => {\r\n              delete groupList[grId];\r\n              this.setState({ groupList });\r\n              if (recordList.indexOf(grId) === recordList.length - 1)\r\n                resolve(true);\r\n            })\r\n        )\r\n      );\r\n    });\r\n  };\r\n\r\n  submitDeleteGroup = async () => {\r\n    let gList = { ...this.state.groupList };\r\n    let eList = { ...this.state.employeeList };\r\n    if (!__DELETE_TYPE) {\r\n      //Delete group from all employees\r\n      await this.removeEmployeesFromGroup(gList[__GROUP_ID], __GROUP_ID, eList);\r\n      // Delete selected group\r\n      await axios.delete(\"/groups/\" + __GROUP_ID);\r\n      delete gList[__GROUP_ID];\r\n      this.setState({ groupList: gList });\r\n      // Remove from selected list\r\n      if (this.state.selectedRecord.indexOf(__GROUP_ID) !== -1) {\r\n        let rList = [...this.state.selectedRecord];\r\n        rList.splice(rList.indexOf(__GROUP_ID), 1);\r\n        this.setState({ selectedRecord: rList });\r\n      }\r\n    } else {\r\n      await this.deleteSelectedGroups(this.state.selectedRecord, gList, eList);\r\n      // Empty selected list\r\n      this.setState({ selectedRecord: [] });\r\n    }\r\n    // Update employees and groups\r\n    this.setState({ employeeList: eList });\r\n    this.closeDeleteModal();\r\n    this.resetTempData();\r\n  };\r\n\r\n  // --------------------------- MEMBERS FUNCTIONS ---------------------------\r\n  manageMembersClick = grId => {\r\n    this.setState({ manageGroups: false });\r\n    __GROUP_ID = grId;\r\n    this.resetTempData();\r\n  };\r\n\r\n  checkAllMembers = checked => {\r\n    let mList = [];\r\n    if (checked) {\r\n      __CHECK_ALL = true;\r\n      mList = [...this.state.groupList[__GROUP_ID].members];\r\n    } else __CHECK_ALL = false;\r\n    this.setState({ selectedRecord: mList });\r\n  };\r\n\r\n  removeMemberModal = memId => {\r\n    if (memId !== null) {\r\n      __MEMBER_ID = memId;\r\n      __DELETE_TYPE = false;\r\n    } else __DELETE_TYPE = true;\r\n    this.setState({ deleteModalshow: true });\r\n  };\r\n\r\n  submitRemoveMember = async () => {\r\n    let gList = { ...this.state.groupList };\r\n    let eList = { ...this.state.employeeList };\r\n    if (!__DELETE_TYPE) {\r\n      //Delete one member from group\r\n      let group = { ...gList[__GROUP_ID] };\r\n      group.id = __GROUP_ID;\r\n      group.members.splice(group.members.indexOf(parseInt(__MEMBER_ID)), 1);\r\n      await axios.put(\"/groups/\" + __GROUP_ID, group).then(res => {\r\n        delete group.id;\r\n        gList[__GROUP_ID] = group;\r\n      });\r\n      let member = { ...eList[__MEMBER_ID] };\r\n      member.id = __MEMBER_ID;\r\n      member.groups.splice(member.groups.indexOf(parseInt(__GROUP_ID)), 1);\r\n      await axios.put(\"/employees/\" + __MEMBER_ID, member).then(res => {\r\n        delete member.id;\r\n        eList[__MEMBER_ID] = member;\r\n      });\r\n\r\n      // Remove from selected list\r\n      if (this.state.selectedRecord.indexOf(__MEMBER_ID) !== -1) {\r\n        let rList = [...this.state.selectedRecord];\r\n        rList.splice(rList.indexOf(__MEMBER_ID), 1);\r\n        this.setState({ selectedRecord: rList });\r\n      }\r\n    } else {\r\n      //Delete members from group\r\n      await this.removeMembersFromGroup(\r\n        this.state.selectedRecord,\r\n        __GROUP_ID,\r\n        gList,\r\n        eList\r\n      );\r\n      // Empty selected list\r\n      this.setState({ selectedRecord: [] });\r\n    }\r\n    //Update employees and groups\r\n    this.setState({ employeeList: eList });\r\n    this.setState({ groupList: gList });\r\n    this.closeDeleteModal();\r\n    this.resetTempData();\r\n  };\r\n\r\n  //Remove selected members from this group\r\n  removeMembersFromGroup = (list, grId, groupList, employeeList) => {\r\n    return new Promise(resolve => {\r\n      let group = { ...groupList[grId] };\r\n      group.id = grId;\r\n      list.forEach(memId => {\r\n        group.members.splice(group.members.indexOf(parseInt(memId)), 1);\r\n        let member = { ...employeeList[memId] };\r\n        member.id = memId;\r\n        member.groups.splice(member.groups.indexOf(parseInt(grId)), 1);\r\n        axios.put(\"/employees/\" + memId, member).then(res => {\r\n          delete member.id;\r\n          employeeList[memId] = member;\r\n          if (list.indexOf(memId) === list.length - 1) {\r\n            axios.put(\"/groups/\" + grId, group).then(res => {\r\n              delete member.id;\r\n              groupList[grId] = group;\r\n              resolve(true);\r\n            });\r\n          }\r\n        });\r\n      });\r\n    });\r\n  };\r\n\r\n  addMembersModal = () => {\r\n    this.setState({ addMembersModalshow: true });\r\n    this.resetTempData();\r\n  };\r\n\r\n  closeAddMembersModal = () => {\r\n    this.setState({ addMembersModalshow: false });\r\n    this.resetTempData();\r\n  };\r\n\r\n  checkAllListedEmployees = checked => {\r\n    let mList = [];\r\n    if (checked) {\r\n      __CHECK_ALL = true;\r\n      Object.keys(this.state.employeeList).forEach(id => {\r\n        if (\r\n          this.state.employeeList[id].groups.indexOf(parseInt(__GROUP_ID)) ===\r\n          -1\r\n        )\r\n          mList.push(parseInt(id));\r\n      });\r\n    } else __CHECK_ALL = false;\r\n    this.setState({ selectedRecord: mList });\r\n  };\r\n\r\n  //Add selected members to this group\r\n  addMembersToGroup = (list, grId, groupList, employeeList) => {\r\n    return new Promise(resolve => {\r\n      let group = { ...groupList[grId] };\r\n      group.id = grId;\r\n      list.forEach(memId => {\r\n        group.members.push(parseInt(memId));\r\n        let member = { ...employeeList[memId] };\r\n        member.id = memId;\r\n        member.groups.push(parseInt(grId));\r\n        axios.put(\"/employees/\" + memId, member).then(res => {\r\n          delete member.id;\r\n          employeeList[memId] = member;\r\n          if (list.indexOf(memId) === list.length - 1) {\r\n            axios.put(\"/groups/\" + grId, group).then(res => {\r\n              delete member.id;\r\n              groupList[grId] = group;\r\n              resolve(true);\r\n            });\r\n          }\r\n        });\r\n      });\r\n    });\r\n  };\r\n\r\n  submitAddMembers = async () => {\r\n    let gList = { ...this.state.groupList },\r\n      eList = { ...this.state.employeeList };\r\n    await this.addMembersToGroup(\r\n      this.state.selectedRecord,\r\n      __GROUP_ID,\r\n      gList,\r\n      eList\r\n    );\r\n    this.setState({ employeeList: eList });\r\n    this.setState({ groupList: gList });\r\n    this.closeAddMembersModal();\r\n    this.resetTempData();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        {this.state.manageGroups ? (\r\n          <div className=\"container\">\r\n            <div className=\"table-wrapper\">\r\n              <ListHeader title={\"Manage Groups\"}>\r\n                <AddButton\r\n                  title={\"Add New Group\"}\r\n                  onClick={this.newGroupModal}\r\n                />\r\n                <DeleteButton\r\n                  title={\"Delete\"}\r\n                  disabled={!this.state.selectedRecord.length}\r\n                  onClick={() => this.deleteGroupModal(null)}\r\n                />\r\n              </ListHeader>\r\n              <table className=\"table table-striped table-hover\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>\r\n                      <span className=\"custom-checkbox\">\r\n                        <input\r\n                          type=\"checkbox\"\r\n                          id=\"selectAll\"\r\n                          checked={__CHECK_ALL}\r\n                          onChange={e => {\r\n                            this.checkAllGroups(e.target.checked);\r\n                          }}\r\n                        ></input>\r\n                        <label htmlFor=\"selectAll\"></label>\r\n                      </span>\r\n                    </th>\r\n                    <th>Name</th>\r\n                    <th>Members</th>\r\n                    <th>Actions</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {Object.keys(this.state.groupList).map(id => {\r\n                    let group = this.state.groupList[id];\r\n                    group.id = id;\r\n                    group.memberCounts = group.members.length;\r\n                    return (\r\n                      <Group\r\n                        key={id}\r\n                        group={group}\r\n                        checked={this.state.selectedRecord.indexOf(id) !== -1}\r\n                        handleChecked={this.selectHandler}\r\n                        onDelete={() => this.deleteGroupModal(id)}\r\n                        onSave={() => this.editGroupModal(group)}\r\n                        onClick={() => this.manageMembersClick(id)}\r\n                      />\r\n                    );\r\n                  })}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div className=\"container\">\r\n            <div className=\"table-wrapper\">\r\n              <div className=\"table-title\">\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-6\">\r\n                    <h2>\r\n                      <Breadcrumb>\r\n                        <Breadcrumb.Item\r\n                          href=\"#\"\r\n                          onClick={() => {\r\n                            this.setState({ manageGroups: true });\r\n                            this.resetTempData();\r\n                          }}\r\n                        >\r\n                          Manage Groups\r\n                        </Breadcrumb.Item>\r\n                        <Breadcrumb.Item active>\r\n                          {this.state.groupList[__GROUP_ID].name}\r\n                        </Breadcrumb.Item>\r\n                      </Breadcrumb>\r\n                    </h2>\r\n                  </div>\r\n                  <div className=\"col-sm-6\">\r\n                    <AddButton\r\n                      title={\"Add Member\"}\r\n                      onClick={() => this.addMembersModal()}\r\n                    />\r\n                    <DeleteButton\r\n                      title={\"Remove\"}\r\n                      disabled={!this.state.selectedRecord.length}\r\n                      onClick={() => this.removeMemberModal(null)}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <table className=\"table table-striped table-hover\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>\r\n                      <span className=\"custom-checkbox\">\r\n                        <input\r\n                          type=\"checkbox\"\r\n                          id=\"selectAll\"\r\n                          checked={__CHECK_ALL}\r\n                          onChange={e => {\r\n                            this.checkAllMembers(e.target.checked);\r\n                          }}\r\n                        ></input>\r\n                        <label htmlFor=\"selectAll\"></label>\r\n                      </span>\r\n                    </th>\r\n                    <th>Name</th>\r\n                    <th>Email</th>\r\n                    <th>Address</th>\r\n                    <th>Phone</th>\r\n                    <th>Actions</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {this.state.groupList[__GROUP_ID].members.map(id => {\r\n                    let member = { ...this.state.employeeList[id] };\r\n                    member.id = id;\r\n                    return (\r\n                      <Member\r\n                        key={id}\r\n                        emp={member}\r\n                        action={true}\r\n                        checked={\r\n                          this.state.selectedRecord.indexOf(parseInt(id)) !== -1\r\n                        }\r\n                        handleChecked={this.selectHandler}\r\n                        onRemove={() => this.removeMemberModal(id)}\r\n                      />\r\n                    );\r\n                  })}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        )}\r\n        {/* --------------------------- ADD NEW & EDIT GROUP MODAL --------------------------- */}\r\n        <Modal show={this.state.groupModalshow} onHide={this.closeGroupModal}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>\r\n              {this.state.groupModalType === 0 ? \"Add New Group\" : \"Edit Group\"}\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Form>\r\n              <FormGroup>\r\n                <label>Name</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  value={this.state.name}\r\n                  onChange={event =>\r\n                    this.setState({ name: event.target.value })\r\n                  }\r\n                  required\r\n                ></input>\r\n              </FormGroup>\r\n            </Form>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={this.closeGroupModal}>\r\n              Cancel\r\n            </Button>\r\n            {this.state.groupModalType === 0 ? (\r\n              <Button variant=\"success\" onClick={this.addGroupHandler}>\r\n                Add\r\n              </Button>\r\n            ) : (\r\n              <Button variant=\"info\" onClick={this.submitEditedGroup}>\r\n                Save\r\n              </Button>\r\n            )}\r\n          </Modal.Footer>\r\n        </Modal>\r\n        {/* --------------------------- DELETE EMPLOYEE MODAL --------------------------- */}\r\n        <Modal show={this.state.deleteModalshow} onHide={this.closeDeleteModal}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Delete Records</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <p>Are you sure you want to delete these Records?</p>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={this.closeDeleteModal}>\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              variant=\"danger\"\r\n              onClick={\r\n                this.state.manageGroups\r\n                  ? this.submitDeleteGroup\r\n                  : this.submitRemoveMember\r\n              }\r\n            >\r\n              Delete\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>{\" \"}\r\n        {/* --------------------------- ADD MEMBERS MODAL --------------------------- */}\r\n        <Modal\r\n          className={\"lg\"}\r\n          show={this.state.addMembersModalshow}\r\n          onHide={this.closeAddMembersModal}\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Add Members</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <table className=\"table table-striped table-hover table-modal-scrollY\">\r\n              <thead>\r\n                <tr>\r\n                  <th>\r\n                    <span className=\"custom-checkbox\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        id=\"selectAll\"\r\n                        checked={__CHECK_ALL}\r\n                        onChange={e => {\r\n                          this.checkAllListedEmployees(e.target.checked);\r\n                        }}\r\n                      ></input>\r\n                      <label htmlFor=\"selectAll\"></label>\r\n                    </span>\r\n                  </th>\r\n                  <th>Name</th>\r\n                  <th>Email</th>\r\n                  <th>Address</th>\r\n                  <th>Phone</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {Object.keys(this.state.employeeList).map(id => {\r\n                  let employee = this.state.employeeList[id];\r\n                  employee.id = id;\r\n                  if (employee.groups.indexOf(parseInt(__GROUP_ID)) === -1)\r\n                    return (\r\n                      <Member\r\n                        key={id}\r\n                        emp={employee}\r\n                        action={false}\r\n                        checked={\r\n                          this.state.selectedRecord.indexOf(parseInt(id)) !== -1\r\n                        }\r\n                        handleChecked={this.selectHandler}\r\n                      />\r\n                    );\r\n                  return null;\r\n                })}\r\n              </tbody>\r\n            </table>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={this.closeAddMembersModal}>\r\n              Cancel\r\n            </Button>\r\n            <Button variant=\"success\" onClick={this.submitAddMembers}>\r\n              Add\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Groups;\r\n","import React from \"react\";\r\n\r\nconst sideBar = props => {\r\n  return (\r\n    <nav id=\"sidebar\">\r\n      <div className=\"sidebar-header\">\r\n        <h3>Employees</h3>\r\n      </div>\r\n      <ul className=\"list-unstyled components\">{props.children}</ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default sideBar;\r\n","import React from \"react\";\r\n\r\nconst editButton = props => {\r\n  return (\r\n    <a href=\"#edit\" className=\"edit\" onClick={props.clicked}>\r\n      <i className=\"material-icons\" data-toggle=\"tooltip\" title=\"Edit\">\r\n        &#xE254;\r\n      </i>\r\n    </a>\r\n  );\r\n};\r\n\r\nexport default editButton;\r\n","import React from \"react\";\r\n\r\nconst deleteButtonSingle = props => {\r\n  return (\r\n    <a href=\"#delete\" className=\"delete\" onClick={props.clicked}>\r\n      <i className=\"material-icons\" data-toggle=\"tooltip\" title=\"Delete\">\r\n        &#xE872;\r\n      </i>\r\n    </a>\r\n  );\r\n};\r\n\r\nexport default deleteButtonSingle;\r\n","import React from \"react\";\r\n\r\nimport EditButton from \"./UI/Buttons/EditButton\";\r\nimport DeleteButtonSingle from \"./UI/Buttons/DeleteButtonSingle\";\r\n\r\nconst employee = props => {\r\n  return (\r\n    <tr>\r\n      <td>\r\n        <span className=\"custom-checkbox\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id={props.emp.id}\r\n            name=\"options[]\"\r\n            value=\"1\"\r\n            checked={props.checked}\r\n            onChange={e => {\r\n              props.handleChecked({\r\n                id: e.target.id,\r\n                value: e.target.checked\r\n              });\r\n            }}\r\n          ></input>\r\n          <label htmlFor={props.emp.id}></label>\r\n        </span>\r\n      </td>\r\n      <td>{props.emp.name}</td>\r\n      <td>{props.emp.email}</td>\r\n      <td>{props.emp.address}</td>\r\n      <td>{props.emp.phone}</td>\r\n      <td>{props.emp.groups.map(gr => `${gr}`).join(\", \")}</td>\r\n      <td>\r\n        <EditButton clicked={props.onSave} />\r\n        <DeleteButtonSingle clicked={props.onDelete} />\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default employee;\r\n","import React from \"react\";\r\n\r\nconst listHeader = props => {\r\n  return (\r\n    <div className=\"table-title\">\r\n      <div className=\"row\">\r\n        <div className=\"col-sm-6\">\r\n          <h2>{props.title}</h2>\r\n        </div>\r\n        <div className=\"col-sm-6\">{props.children}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default listHeader;\r\n","import React from \"react\";\r\n\r\nconst addButton = props => {\r\n  return (\r\n    <a\r\n      href=\"#add\"\r\n      className=\"btn btn-success\"\r\n      onClick={props.onClick}\r\n    >\r\n      <i className=\"material-icons\">&#xE147;</i>\r\n      <span>{props.title}</span>\r\n    </a>\r\n  );\r\n};\r\n\r\nexport default addButton;\r\n","import React from \"react\";\r\n\r\nconst deleteButton = props => {\r\n  return (\r\n    <a\r\n      href=\"#delete\"\r\n      className={props.disabled ? \"btn btn-danger disabled\" : \"btn btn-danger\"}\r\n      onClick={props.onClick}\r\n    >\r\n      <i className=\"material-icons\">&#xE15C;</i> <span>{props.title}</span>\r\n    </a>\r\n  );\r\n};\r\n\r\nexport default deleteButton;\r\n","import React from \"react\";\r\n\r\nimport EditButton from \"./UI/Buttons/EditButton\";\r\nimport DeleteButtonSingle from \"./UI/Buttons/DeleteButtonSingle\";\r\n\r\nconst group = props => {\r\n  return (\r\n    <tr>\r\n      <td>\r\n        <span className=\"custom-checkbox\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id={props.group.id}\r\n            name=\"options[]\"\r\n            value=\"1\"\r\n            checked={props.checked}\r\n            onChange={e => {\r\n              props.handleChecked({\r\n                id: e.target.id,\r\n                value: e.target.checked\r\n              });\r\n            }}\r\n          ></input>\r\n          <label htmlFor={props.group.id}></label>\r\n        </span>\r\n      </td>\r\n      <td>\r\n        <button type=\"button\" className=\"btn btn-link\" onClick={props.onClick}>\r\n          {props.group.name}\r\n        </button>\r\n      </td>\r\n      <td>\r\n        <button type=\"button\" className=\"btn btn-link\" onClick={props.onClick}>\r\n          [ {props.group.memberCounts} ]\r\n        </button>\r\n      </td>\r\n      <td>\r\n        <EditButton clicked={props.onSave} />\r\n        <DeleteButtonSingle clicked={props.onDelete} />\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default group;\r\n","import React from \"react\";\r\n\r\nimport DeleteButtonSingle from \"./UI/Buttons/DeleteButtonSingle\";\r\n\r\nconst member = props => {\r\n  return (\r\n    <tr>\r\n      <td>\r\n        <span className=\"custom-checkbox\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id={props.emp.id}\r\n            name=\"options[]\"\r\n            value=\"1\"\r\n            checked={props.checked}\r\n            onChange={e => {\r\n              props.handleChecked({\r\n                id: e.target.id,\r\n                value: e.target.checked\r\n              });\r\n            }}\r\n          ></input>\r\n          <label htmlFor={props.emp.id}></label>\r\n        </span>\r\n      </td>\r\n      <td>{props.emp.name}</td>\r\n      <td>{props.emp.email}</td>\r\n      <td>{props.emp.address}</td>\r\n      <td>{props.emp.phone}</td>\r\n      {props.action ? (\r\n        <td>\r\n          <DeleteButtonSingle clicked={props.onRemove} />\r\n        </td>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default member;\r\n","import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\n\nimport \"./App.css\";\nimport SideBar from \"./components/Navigation/SideBar\";\nimport Employees from \"./components/Employees\";\nimport Groups from \"./components/Groups\";\n\nfunction App() {\n  const history = createBrowserHistory();\n  const [active, setActive] = useState();\n  useEffect(() => {\n    setActive(history.location.pathname || \"/employees\");\n  },[history.location.pathname]);\n  return (\n    <Router>\n      <div className=\"wrapper\">\n        <SideBar>\n          <li className={active === \"/employees\" ? \"active\" : \"\"}>\n            <Link to=\"/employees\" onClick={() => setActive(\"/employees\")}>\n              List Of Employees\n            </Link>\n          </li>\n          <li\n            className={active === \"/groups\" ? \"active\" : \"\"}\n            onClick={() => setActive(\"/groups\")}\n          >\n            <Link to=\"/groups\">List Of Groups</Link>\n          </li>\n        </SideBar>\n        <Switch>\n          <Route path=\"/employees\">\n            <Employees />\n          </Route>\n          <Route path=\"/groups\">\n            <Groups />\n          </Route>\n          <Route path=\"/\">\n            <Employees />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport axios from \"axios\";\n\naxios.defaults.baseURL = \"http://localhost:3004\";\naxios.defaults.headers.post[\"Content-Type\"] = \"application/json\";\n\naxios.interceptors.request.use(\n  request => {\n    return request;\n  },\n  error => {\n    alert(\"Something goes wrong! check json-server!\");\n    return Promise.reject(error);\n  }\n);\n\naxios.interceptors.response.use(\n  response => {\n    return response;\n  },\n  error => {\n    alert(\"Something goes wrong! check json-server!\");\n    return Promise.reject(error);\n  }\n);\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}